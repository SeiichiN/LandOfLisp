se-ichi@frontier:~/work/clisp$ clisp
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.49.60+ (2017-06-25) <http://clisp.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2010

Type :h and hit Enter for context help.

[1]> (defun game-reple ()
       (loop (print (eval (read)))))
GAME-REPLE
[2]> (game-reple)
(look)

*** - EVAL: undefined function LOOK
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'LOOK).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'LOOK).
ABORT          :R4      Abort main loop
Break 1 [3]> (game-reple)
(you are in the living room)

*** - EVAL: undefined function YOU
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'YOU).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'YOU).
ABORT          :R4      Abort debug loop
ABORT          :R5      Abort main loop
Break 2 [4]> (defun game-reple ()
                (let ((cmd (game-read)))
                   (unless (eq (car cmd) 'quit)
                      (game-print (game-eval cmd))
                      (game-reple))))
GAME-REPLE
Break 2 [4]> (defun game-read ()
                (let ((cmd (read-from-string
                             (concatnate 'string "(" (read-line) ")"))))
                   (flet ((quote-it (x)
                            (list 'quote x)))
                      (cons (car cmd) (mapcar #'quote-it (cdr cmd))))))
GAME-READ
Break 2 [4]> (game-read)

*** - EVAL: undefined function CONCATNATE
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'CONCATNATE).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'CONCATNATE).
ABORT          :R4      Abort debug loop
ABORT          :R5      Abort debug loop
ABORT          :R6      Abort main loop
Break 3 [5]> (defun game-read ()
                (let ((cmd (read-from-string
                             (concatenate 'string "(" (read-line) ")"))))
                   (flet ((quote-it (x)
                            (list 'quote x)))
                      (cons (car cmd) (mapcar #'quote-it (cdr cmd))))))
GAME-READ
Break 3 [5]> (game-read)
walk east
(WALK 'EAST)
Break 3 [5]> (game-read)
walk east and eat budding
(WALK 'EAST 'AND 'EAT 'BUDDING)
Break 3 [5]> (defparameter *allowed-commands* '(look walk pickup inventory))
*ALLOWED-COMMANDS*
Break 3 [5]> (defun game-eval (sexp)
               (if (member (car sexp) *allowed-commands*)
                   (eval sexp)
                   '(i do not know that command.)))
GAME-EVAL
Break 3 [5]> (game-read)
kill you
(KILL 'YOU)
Break 3 [5]> (game-reple)
kill you

*** - EVAL: undefined function GAME-PRINT
The following restarts are available:
USE-VALUE      :R1      Input a value to be used instead of (FDEFINITION 'GAME-PRINT).
RETRY          :R2      Retry
STORE-VALUE    :R3      Input a new value for (FDEFINITION 'GAME-PRINT).
ABORT          :R4      Abort debug loop
ABORT          :R5      Abort debug loop
ABORT          :R6      Abort debug loop
ABORT          :R7      Abort main loop
Break 4 [6]> (game-reple)
quit
NIL
Break 4 [6]> (defun tweak-text (lst caps lit)
               (when lst
                 (let ((item (car lst))
                       (rest (cdr lst)))
                   (cond ((eql item #\space) (cons item (tweak-text rest caps lit)))
                         ((member item '(#\! #\? #\.)) (cons item (tweak-text rest t lit)))
                         (lit (cons item (tweak-text rest nil lit)))
                         (caps (cons (char-upcase item) (tweak-text rest nil lit)))
                         (t (cons (char-downcase item) (tweak-text rest nil nil)))))))
TWEAK-TEXT
Break 4 [6]> 
Break 4 [6]> (defun game-print (lst)
                (princ (coerce (tweak-text (coerce (string-trim "() "
                                                                (prin1-to-string lst))
                                                   'list)
                                           t
                                           nil)
                               'string))
                (fresh-line))

Break 7 [9]> (defparameter *nodes* '((living-room
                                       (you are in the living room.
                                        a wizard is snoring loudly on the couch.))
                                     (garden
                                       (you are in a beautiful garden.
                                        there is a well in front of you.))
                                     (attic
                                       (you are in the attic.
                                        there is a giant welding torch in the corner.))))
*NODES*
Break 7 [9]> *nodes*
((LIVING-ROOM (YOU ARE IN THE LIVING ROOM. A WIZARD IS SNORING LOUDLY ON THE COUCH.))
 (GARDEN (YOU ARE IN A BEAUTIFUL GARDEN. THERE IS A WELL IN FRONT OF YOU.))
 (ATTIC (YOU ARE IN THE ATTIC. THERE IS A GIANT WELDING TORCH IN THE CORNER.)))
Break 7 [9]> (assoc 'garden *nodes*)
(GARDEN (YOU ARE IN A BEAUTIFUL GARDEN. THERE IS A WELL IN FRONT OF YOU.))
Break 7 [9]> (defun describe-location (location nodes)
                (cadr (assoc location nodes)))
DESCRIBE-LOCATION
Break 7 [9]> (describe-location 'living-room *nodes*)
(YOU ARE IN THE LIVING ROOM. A WIZARD IS SNORING LOUDLY ON THE COUCH.)

